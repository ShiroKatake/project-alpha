//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6ee68d97-f075-4ebd-8297-7a58394107b9"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""747c8d3a-58e9-4b92-8fd9-90cc7d4a764f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cc83aa9d-32d1-49fc-8b02-f7372bad757c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Abiliity 1"",
                    ""type"": ""Button"",
                    ""id"": ""aada28ab-7a59-4954-af34-8bb67b68a7a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abiliity 2"",
                    ""type"": ""Button"",
                    ""id"": ""eaf1c108-82b5-455e-a888-82551ba90adf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abiliity 3"",
                    ""type"": ""Button"",
                    ""id"": ""e8de2a4a-30e6-46af-8a2d-97622a5de2a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""SlowTap(duration=0.1,pressPoint=0.1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""749acca6-2f3d-4e79-99dc-a64ce5bd5551"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b17b4f69-c5a5-4781-bdff-5a0529cc5652"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4cf9914c-455c-4968-a15d-f4a0fd693b6d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14bcdb25-1367-44f7-8064-b822f2ace2ff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""387ab30b-24b1-481c-aacb-8a39838e07c2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""efea2af2-84e6-4322-a5b2-3d0b7cfa8e58"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7d773557-8883-4b08-a238-2955b96e8ef1"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abiliity 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1be1f550-ca5c-4c25-8aa5-80521edea322"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abiliity 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2ece9c0-31fd-45bc-a2ba-2a1f92b363b9"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Abiliity 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Abiliity1 = m_Player.FindAction("Abiliity 1", throwIfNotFound: true);
        m_Player_Abiliity2 = m_Player.FindAction("Abiliity 2", throwIfNotFound: true);
        m_Player_Abiliity3 = m_Player.FindAction("Abiliity 3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Abiliity1;
    private readonly InputAction m_Player_Abiliity2;
    private readonly InputAction m_Player_Abiliity3;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Abiliity1 => m_Wrapper.m_Player_Abiliity1;
        public InputAction @Abiliity2 => m_Wrapper.m_Player_Abiliity2;
        public InputAction @Abiliity3 => m_Wrapper.m_Player_Abiliity3;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShoot;
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Abiliity1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity1;
                @Abiliity1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity1;
                @Abiliity1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity1;
                @Abiliity2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity2;
                @Abiliity2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity2;
                @Abiliity2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity2;
                @Abiliity3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity3;
                @Abiliity3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity3;
                @Abiliity3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAbiliity3;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Abiliity1.started += instance.OnAbiliity1;
                @Abiliity1.performed += instance.OnAbiliity1;
                @Abiliity1.canceled += instance.OnAbiliity1;
                @Abiliity2.started += instance.OnAbiliity2;
                @Abiliity2.performed += instance.OnAbiliity2;
                @Abiliity2.canceled += instance.OnAbiliity2;
                @Abiliity3.started += instance.OnAbiliity3;
                @Abiliity3.performed += instance.OnAbiliity3;
                @Abiliity3.canceled += instance.OnAbiliity3;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnAbiliity1(InputAction.CallbackContext context);
        void OnAbiliity2(InputAction.CallbackContext context);
        void OnAbiliity3(InputAction.CallbackContext context);
    }
}
